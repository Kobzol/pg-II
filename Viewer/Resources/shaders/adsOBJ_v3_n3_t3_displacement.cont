#version 400 core //compatibility

layout (vertices = 3) out;			// define the number of Control Points in the output patch

// attributes of the input Control Points
in vec3 wcPosition[];
in vec3 wcNormal[];
in vec2 wcTexCoords[];

uniform vec3 CameraPosition;

// attributes of the output Control Points
out vec3 wcPosition2[];
out vec3 wcNormal2[];
out vec2 wcTexCoords2[];

float GetTessLevel(float distance0, float distance1)
{
	//3. some logic based on distances
	float avg = (distance0 + distance1) * 0.5f;

	if (avg <= 1.0f) return 5.0f;
	else if (avg <= 2.0f) return 3.0f;
	else return 1.0f;
}

void main()
{
	//1. Copy input control points to output buffer, e.g. wcTexCoords2[gl_InvocationID] = ...
	wcPosition2[gl_InvocationID] = wcPosition[gl_InvocationID];
	wcNormal2[gl_InvocationID] = wcNormal[gl_InvocationID];
	wcTexCoords2[gl_InvocationID] = wcTexCoords[gl_InvocationID];

	//2. Get distances from camera to the three control points (GLSL distance method), e.g. float distance0 = distance(...,...);
	float distances[3];
	for (int i = 0; i < 3; i++)
	{
		distances[i] = distance(CameraPosition, wcPosition[i]);
	}

	//4. Get tessellation levels, gl_TessLevelOuter[], gl_TessLevelInner[]
	for (int i = 0; i < 3; i++)
	{
		gl_TessLevelOuter[i] = GetTessLevel(distances[(i + 1) % 3], distances[(i + 2) % 3]);
	}
	gl_TessLevelInner[0] = gl_TessLevelOuter[0];
}
